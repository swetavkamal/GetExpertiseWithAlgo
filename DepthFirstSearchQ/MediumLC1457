
Given a binary tree where node values are digits from 1 to 9. A path in the binary tree is said to be pseudo-palindromic if at least one permutation of the node values in the path is a palindrome.

Return the number of pseudo-palindromic paths going from the root node to leaf nodes.

		2
	   / \
	  3   1
	 / \   \
	3   1	1


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */


class Solution {
    private int count=0;
    public int pseudoPalindromicPaths (TreeNode root) {

    if(root == null)
        return 0;

    if(root.left ==null && root.right ==null)
        return 1;

    findPath(root,"");
    return count;
        
    }


    private void findPath(TreeNode root, String str)
    {
        str=str+root.val;

        if(root.left ==null && root.right ==null)
        {
            if(canPalindrome(str))
            {
                count++;
            }
        }
        if(root.left != null)
            findPath(root.left,str);
        if(root.right != null)
            findPath(root.right,str);

    }

    private boolean canPalindrome(String str)
    {

        HashSet<Character> hs = new HashSet<>();
        for(int i=0;i<str.length();i++)
        {
            if(hs.contains(str.charAt(i)))
                hs.remove(str.charAt(i));
            else
                hs.add(str.charAt(i));
        }

        return (hs.size() <= 1);
    }





}