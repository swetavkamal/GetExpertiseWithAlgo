There are a total of n courses you have to take, labeled from 0 to n-1.

Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, return the ordering of courses you should take to finish all courses.

There may be multiple correct orders, you just need to return one of them. If it is impossible to finish all courses, return an empty array.
/**

4, [[1,0],[2,0],[3,1],[3,2]]


**/

class Solution {


	private HashMap<Integer,List<Integer>> graph = new HashMap<>();
	private Queue<Integer> queue= new LinkedList<>();
	private int[] courses;
	private int[] output;

    public int[] findOrder(int numCourses, int[][] prerequisites) {
    	courses= new int[numCourses];
    	output= new int[numCourses];
        
        if(numCourses==1)
          return new int[1];
        

        //Creating graph and an array for the in-degree 
        for(int i=0;i<prerequisites.length;i++)
        {
        	int key= prerequisites[i][1];
        	int val= prerequisites[i][0];

        	if(!graph.containsKey(key))
        	{
        		List<Integer> list = new ArrayList<>();
        		list.add(val);
        		graph.put(key,list);
        	}
        	else
        		graph.get(key).add(val);

        	courses[val]++;

        }

        for(int i=0;i<courses.length;i++)
        {
        	if(courses[i]==0)
        		queue.add(i);
        }

        int x=0;
        while(!queue.isEmpty())
        {
        	int curr= queue.poll();
        	output[x]=curr;

          if(graph.containsKey(curr))
          {
            List<Integer> currList= graph.get(curr);
            for(int i=0;i<currList.size();i++)
        	  {
        		courses[currList.get(i)]--;
        		if(courses[currList.get(i)] ==0)
        			queue.add(currList.get(i));
        	  }
          }
        	  
        	
          x++;
          

      }

      //Checking if the course still has in-node attached so its a loop and output=null
      for(int i=0;i<courses.length;i++)
      {
        if(courses[i] != 0)
          return new int[0];
   
      }
   

       return output;



    }
}