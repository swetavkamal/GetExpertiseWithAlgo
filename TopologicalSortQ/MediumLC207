207. Course Schedule

There are a total of numCourses courses you have to take, labeled from 0 to numCourses-1.

Some courses may have prerequisites, for example to take course 0 you have to first take course 1, which is expressed as a pair: [0,1]

Given the total number of courses and a list of prerequisite pairs, is it possible for you to finish all courses?

Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
             To take course 1 you should have finished course 0. So it is possible.

Solution:

class Solution {

	private HashMap<Integer,List<Integer>> graph = new HashMap<>();
	private Queue<Integer> queue = new LinkedList<>();
	private int[] courses;

    public boolean canFinish(int numCourses, int[][] prerequisites) {
    
    courses= new int[numCourses];
    for(int i=0;i<prerequisites.length;i++)
    {
    	int from = prerequisites[i][1];
    	int in=prerequisites[i][0];

    	if(!graph.containsKey(from))
    	{
    		List<Integer> list = new ArrayList<>();
    		list.add(in);
    		graph.put(from,list);
    	}
    	else
    		graph.get(from).add(in);

    	courses[in]++;
	}


	for(int i=0;i<courses.length;i++)
	{
		if(courses[i]==0)
			queue.add(i);
	}

	while(!queue.isEmpty())
	{
		int val=queue.poll();
		if(graph.containsKey(val))
		{
			List<Integer> currList= graph.get(val);
			for(int i=0;i<currList.size();i++)
			{
				courses[currList.get(i)]--;
				if(courses[currList.get(i)]==0)
					queue.add(currList.get(i));
			}

		}
	}

	for(int i=0;i<courses.length;i++)
	{
		if(courses[i]!=0)
			return false;
	}

	return true;
    }
}
