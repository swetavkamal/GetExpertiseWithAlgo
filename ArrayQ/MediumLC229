/**
We will follow bucketing algorithm here..

Since we have to find n/3 .. so we will take two elements and their count ..
If it would have been n/4.. we would have taken 3 elements and their count..

[1,1,1,3,3,2,2,2]
initialize element1, element2, count1, count2 with 0
start the loop and check if the curr element == element1 . increase count1
else if curr element=element2.. increase count2..
else if count1==0, set the element as element1 and set count1 as 1
else if count2==0 set the elemetns as element2 and set count2 as 1

if nothing.. increase both count by 1..

you would get two elements ... loop through to check if they are majority..

**/

class Solution {
    public List<Integer> majorityElement(int[] nums) {

    int element1=0;
    int count1=0;
    int element2=0;
    int count2=0;

    List<Integer> output = new ArrayList<>();

    for(int i=0;i<nums.length;i++)
    {
    	if(nums[i]==element1)
    		count1++;
    	else if(nums[i]==element2)
    			count2++;
    	else if(count1==0)
    	{
    		element1=nums[i];
    		count1++;
    	}
    	else if(count2==0)
    	{
    		element2=nums[i];
    		count2++;
    	}
    	else 
    	{
    		count1--;
    		count2--;
    	}


    }

    count1=0;
    count2=0;
    for(Integer a : nums)
    {
    	if(a==element1)
    		count1++;
    	else if(a==element2)
    		count2++;
    }

    if(count1 > nums.length/3)
    	output.add(element1);
    if(count2 > nums.length/3)
    	output.add(element2);

    return output;

        
    }
}