/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 *
 	Solution :
 	First of all we need to convert the tree into graph using DFS such that 

 		  	 1
            / \
           2   3
          /
         4
        /
       5
      /
     6


     The above tree would get converted into 

     1 -> [ 2 , 3 ]
     2 -> [ 1 , 4 ]
     4 -> [ 2 , 5 ]
     5 -> [ 4 , 6 ]
     6 -> [ 5 ]
     3 -> [ 1]

     Pointer : In above DFS graph, only those nodes would be leaf need which has one node that is parent

     We would traverse through the Key of above graph and find the key node and add it to Queue of BFS
     So we would now use BFS. 
     Pointer : BFS traverse level wise, so the first node which would be leaf node would be the shortest length

     For example if our key is 2 so the above tree would look like 

     	
           2  
          / \ 
         4   1
        /     \ 
       5       3
      /
     6
     And BFS would go to 2, 4, 1, 5, 3 [ output], 6

 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    HashMap<TreeNode,List<TreeNode>> graph= new HashMap<>();
    Queue<TreeNode> queue= new LinkedList<>();
    Set<TreeNode> seen = new HashSet<>();

    public int findClosestLeaf(TreeNode root, int k) {

    if(root == null)
    	return 0;
    TreeNode parent= null;
    dfs(root,parent);

    for(TreeNode node : graph.keySet())
    {
    	if(node != null && node.val == k )
    	{
			queue.add(node);
			seen.add(node);
		//	break;
    	}
    }

    while(!queue.isEmpty())
    {
    	TreeNode curr= queue.poll();
   // 	seen.add(curr);

      if(curr != null)
      {
        if(graph.get(curr).size() <= 1)
    		  return curr.val;

    	List<TreeNode> list= graph.get(curr);
    	int curr_size= list.size();
    	for(int i=0;i<curr_size;i++)
    	{
        if(!seen.contains(list.get(i)))
        {
          seen.add(curr);
    		  queue.add(list.get(i));
          
        }
        
    	}
      }
    	
    }
      
      return 0;

        
    }


    private void dfs(TreeNode root, TreeNode parent)
    {
    	if(root == null)
    		return;

      System.out.println(root.val);
    	if(!graph.containsKey(parent))
    		graph.put(parent, new LinkedList<TreeNode>());
    	if(!graph.containsKey(root))
    		graph.put(root, new LinkedList<TreeNode>());

    	graph.get(parent).add(root);
    	graph.get(root).add(parent);

    	dfs(root.left, root);
    	dfs(root.right, root);
    }
}












